// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace lrs.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220929173226_DatabaseCreation")]
    partial class DatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a4156b4-6368-4808-8ca0-898edc8f4615"),
                            Name = "Анапа"
                        });
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Address = "583 Wall Dr. Gwynn Oak, MD 21207",
                            Country = "USA",
                            Name = "IT_Solutions Ltd"
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Address = "312 Forest Avenue, BF 923",
                            Country = "USA",
                            Name = "Admin_Solutions Ltd"
                        });
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("PartWorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartWorldId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30ac4b5d-f73c-452b-93c3-0af8ba31129a"),
                            Name = "Россия"
                        },
                        new
                        {
                            Id = new Guid("f9ede011-01c7-4ee7-abd0-084e7762634d"),
                            Name = "Китай"
                        },
                        new
                        {
                            Id = new Guid("515ac902-4f8a-49e1-a2ad-7a76592c9786"),
                            Name = "Индия"
                        },
                        new
                        {
                            Id = new Guid("965bdc2a-aea2-4170-9fd2-f70c1baedcbf"),
                            Name = "Италия"
                        },
                        new
                        {
                            Id = new Guid("ef581d2f-bc3e-4b3d-a0cd-03389b10aa80"),
                            Name = "Испания"
                        },
                        new
                        {
                            Id = new Guid("e2ee981b-13d8-4252-94e9-1038ac1f3bf0"),
                            Name = "Канада"
                        },
                        new
                        {
                            Id = new Guid("600d3f5a-415f-44ef-b123-a71df57fd299"),
                            Name = "США"
                        },
                        new
                        {
                            Id = new Guid("69b84acb-8159-4aef-a57d-d357f4d890dc"),
                            Name = "Бразилия"
                        },
                        new
                        {
                            Id = new Guid("f44bfd5d-b398-4bf4-9df2-7dbb987435cb"),
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = new Guid("0afb027f-c88f-4671-b8c1-0fc98dabc446"),
                            Name = "Португалия"
                        },
                        new
                        {
                            Id = new Guid("8cb64f0c-8068-465f-9bdc-7b2ff2fdbc39"),
                            Name = "Грузия"
                        },
                        new
                        {
                            Id = new Guid("c11e1c93-1f0c-4bad-8b10-eadae5db99a6"),
                            Name = "Англия"
                        },
                        new
                        {
                            Id = new Guid("4045fa2b-02c6-4add-9d56-8d0d17d870b5"),
                            Name = "Япония"
                        },
                        new
                        {
                            Id = new Guid("1fbd32e1-1d16-41f4-b5c0-59778602243a"),
                            Name = "Германия"
                        },
                        new
                        {
                            Id = new Guid("e9752849-1302-476f-89bb-63f76ed69b58"),
                            Name = "Армения"
                        },
                        new
                        {
                            Id = new Guid("20aa4f75-ee9f-447d-80ef-c50cbec55bfd"),
                            Name = "Франция"
                        },
                        new
                        {
                            Id = new Guid("3f559611-e30a-4927-83ac-2b4b55e35336"),
                            Name = "Чили"
                        },
                        new
                        {
                            Id = new Guid("dea5d47c-2c86-47b6-9c70-6d9e2a38b20d"),
                            Name = "Египет"
                        },
                        new
                        {
                            Id = new Guid("ff8372e8-ac6d-41b7-aab8-6de6e16e6c10"),
                            Name = "Тунис"
                        },
                        new
                        {
                            Id = new Guid("3fdc31a1-7f45-4102-ba94-7f75c77264e9"),
                            Name = "Марокко"
                        },
                        new
                        {
                            Id = new Guid("908e9dda-0daa-4668-acd4-350b4e273a1a"),
                            Name = "ЮАР"
                        });
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeId");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Age = 26,
                            CompanyId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Name = "Sam Raiden",
                            Position = "Software developer"
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            Age = 30,
                            CompanyId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Name = "Jana McLeaf",
                            Position = "Software developer"
                        },
                        new
                        {
                            Id = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Age = 35,
                            CompanyId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Name = "Kane Miller",
                            Position = "Administrator"
                        });
                });

            modelBuilder.Entity("Entities.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HotelId");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Entities.Models.PartWorld", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PartWorldId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("PartWorlds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b111fac4-5b5c-40e2-a68d-53c2907e1d2e"),
                            Name = "Европа"
                        },
                        new
                        {
                            Id = new Guid("1239cd80-60b0-41cb-a3a2-9e2cce94ce11"),
                            Name = "Азия"
                        },
                        new
                        {
                            Id = new Guid("dceb4d64-723e-4086-a95e-423421b30bfd"),
                            Name = "Африка"
                        },
                        new
                        {
                            Id = new Guid("07900f58-5836-4765-a6ff-e3d6fc2d88b8"),
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = new Guid("e21357cb-6126-4fee-9fb0-14c2020b14bb"),
                            Name = "Америка"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TicketId");

                    b.Property<Guid>("City")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Hotel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("User")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<Guid>("World")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.HasOne("Entities.Models.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.HasOne("Entities.Models.PartWorld", null)
                        .WithMany("Countries")
                        .HasForeignKey("PartWorldId");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Entities.Models.Hotel", b =>
                {
                    b.HasOne("Entities.Models.City", null)
                        .WithMany("hotels")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Navigation("hotels");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.Models.PartWorld", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
